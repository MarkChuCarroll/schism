use crate::lex;
use crate::ast;
use crate::error;
use lalrpop_util::ParseError;

grammar;


pub Sect: ast::Sect = {
    <uses:UseDecl*>  <decls:Decl+>   => ast::Sect{uses, decls}

}

pub Symbol: ast::Symbol = {
    <s:SYMBOL> => ast::Symbol(s.to_string())
}

pub Ident: ast::Identifier = {
    <mut syms:(<Symbol> "::")*> <trailing:Symbol>  =>
    if syms.is_empty() {
        ast::Identifier::Simple(trailing)
    } else {
        syms.push(trailing);
        ast::Identifier::Qualified(syms)
    }
}

pub UseDecl: ast::UseDecl = {
    "use" <id:Ident> <syms:( "{" <Comma<Symbol>> "}")?> =>
        ast::UseDecl{ sect: id, names: syms }
}

pub Decl: ast::Decl = {
    <func:FunctionDecl> => ast::Decl::Function(func),
    <st:StructDecl> => ast::Decl::Struct(st),
    <var:VarDecl> => ast::Decl::Var(var)
}

pub VarDecl: ast::VarDecl = {
    "var" <name:Symbol> ":" <s_type:Type> "init" <body:Expr+> "end" =>
        ast::VarDecl{name, s_type, init_value: body}
}

pub FunctionDecl: ast::FunctionDecl = {
    "fun" <tps:TypeParamBlock?> <name:Symbol> <signature:StackEffect> "is"  <body:Expr*>
    "end" =>
        ast::FunctionDecl{name, type_params: tps, signature, body}
}

pub StackEffect: ast::StackEffect = {
    "(" <before:StackImage> "--" <after:StackImage>  ")" =>? {
            let iv = before.0.unwrap_or_else(|| ast::StackImage::unique_image_var());
            Ok(ast::StackEffect{
                before: ast::StackImage{
                    stack_var: iv.clone(),
                    stack: before.1
                },
                after: ast::StackImage{
                    stack_var: after.0.unwrap_or(iv),
                    stack: after.1
                }
            })
        }
}

pub TypeParamBlock: Vec<ast::TypeParam> = {
    "[" <Comma<TypeParam>>   "]"
}

pub TypeParam: ast::TypeParam = {
    <name:TYPEVAR> <constraint:("<<" <Type>)?> =>
        ast::TypeParam{ name: ast::Symbol(name), constraint }
}

pub Type: ast::SType = {
    <se:StackEffect> => ast::SType::Function(se),
    <bl:TypeArgBlock?> <id:Ident> => {
        match bl {
            None => ast::SType::Simple(id),
            Some(type_args) => ast::SType::Parametric(type_args, id)
        }
    },
    <t:TYPEVAR> =>
        ast::SType::TypeVar(ast::Symbol(t))

}


pub TypeArgBlock: Vec<ast::SType> = {
    "[" <Comma<Type>>  "]"
}

pub StackImage: (Option<ast::Symbol>, Vec<ast::SType>) = {
    <context:StackContextVar?> <types: Type*> =>
            (context,  types)
}

pub StackContextVar: ast::Symbol = {
    <sv:STACKVAR> => ast::Symbol(sv)
}


pub StructDecl: ast::StructDecl = {
    "struct" <tpb:TypeParamBlock?> <name:Symbol> <supers:SuperStructs?>  "is"
        <members:StructMemberDecl*>
    "end" =>  {
        let mut methods: Vec<ast::MethodDecl> = Vec::new();
        let mut fields: Vec<ast::TypedIdentifier> = Vec::new();
        for m in members {
            match m {
                ast::StructMemberDecl::Field(t) => fields.push(t),
                ast::StructMemberDecl::Method(m) => methods.push(m)
            }
        }
        ast::StructDecl{name, supers, type_params: tpb, fields, methods}
    }
}

pub SuperStructs: Vec<ast::SType> = {
    "(" <Comma<Type>> ")"
}

pub StructMemberDecl: ast::StructMemberDecl = {
    "slot" <s:Symbol> ":" <t:Type> =>
                ast::StructMemberDecl::Field(
                    ast::TypedIdentifier{name: s, s_type: t}),
    <smd:StructMethodDecl> => ast::StructMemberDecl::Method(smd)
}

pub StructMethodDecl: ast::MethodDecl = {
    "meth" <name:Symbol> <effect:StackEffect> "is"
        <body:Expr*>
    "end" => ast::MethodDecl{name, effect, body}
}

pub Expr: ast::Expr = {
    <f:FunCallExpr> => ast::Expr::FunCall(f),
    <l:ListExpr> => ast::Expr::List(l),
    <m:MapExpr> => ast::Expr::Map(m),
    <c:CondExpr> => ast::Expr::Cond(c),
    <m:MethodCallExpr> => ast::Expr::MethodCall(m),
    <b:Block> => ast::Expr::Block(b),
    <l:LoopExpr> => ast::Expr::Loop(l),
   <i:INTLIT> => ast::Expr::IntLit(i),
   <f:FLOATLIT> => ast::Expr::FloatLit(f),
   <s:STRINGLIT> => ast::Expr::StringLit(s),
   <c:CHARLIT> => ast::Expr::CharLit(c)
}

pub FunCallExpr: ast::FunCallExpr = {
    <bl:TypeArgBlock?> <id:Ident> => ast::FunCallExpr{
        id,
        type_args: bl
    },
}

pub CondExpr: ast::CondExpr = {
    "if" <true_block:Expr+> "else" <false_block:Expr+> "end" =>
        ast::CondExpr{true_block, false_block}
}

pub ListExpr:  ast::ListExpr = {
    "#[" <t:Type>  "|" <es:Comma<Expr+>>   "]#" =>
        ast::ListExpr{ value_type: t, values: es }
}

pub MapExpr: ast::MapExpr = {
   "#{" <k:Type> "," <v:Type> "|"  <pairs:Comma<Pair>>  "}#" =>
        ast::MapExpr{key_type: k, value_type: v, values: pairs }
}

pub Pair: (Vec<ast::Expr>, Vec<ast::Expr>) = {
    "(" <k:Expr+> ","  <v:Expr+> ")" =>
        (k, v)
}

pub MethodCallExpr: ast::MethodCallExpr = {
    "<-" <s:Symbol> =>
        ast::MethodCallExpr{ sym: s }
}

pub Block: ast::BlockExpr = {
    "[[" <effect:StackEffect>  <body:Expr*> "]]" =>
        ast::BlockExpr{effect, body}
}

pub LoopExpr: ast::LoopExpr = {
    "loop" <es:Expr+> "end" => ast::LoopExpr{ body: es }
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T> => {
                    v.push(e);
                    v
    }
};


extern {
    type Location = usize;
    type Error = error::Error;
    enum lex::Tok {
        SYMBOL => lex::Tok::SYMBOL(<String>),
        "use" => lex::Tok::USE,
        "," => lex::Tok::COMMA,
        "{" => lex::Tok::LBRACE,
        "}" => lex::Tok::RBRACE,
        "[" =>lex::Tok::LBRACK,
        "]" =>lex::Tok::RBRACK,
        "#[" => lex::Tok::PLBRACK,
        "]#" => lex::Tok::PRBRACK,
        "#{" => lex::Tok::PLBRACE,
        "}#" => lex::Tok::PRBRACE,
        "[[" => lex::Tok::BLOPEN,
        "]]" => lex::Tok::BLCLOSE,
        "|" => lex::Tok::BAR,
        "<-" => lex::Tok::SEND,
        "fun" => lex::Tok::FUN,
        "is" => lex::Tok::IS,
        "(" => lex::Tok::LPAREN,
        ")" => lex::Tok::RPAREN,
        "--" => lex::Tok::DASHDASH,

        ":" => lex::Tok::COLON,
        "::" => lex::Tok::COCO,
        STACKVAR => lex::Tok::STACKVAR(<String>),
        TYPEVAR => lex::Tok::TYPEVAR(<String>),
        "struct" => lex::Tok::STRUCT,
        "end" => lex::Tok::END,
        "slot" => lex::Tok::SLOT,
        "meth" => lex::Tok::METH,
        "<<" => lex::Tok::SUBTYPE,

        "var" => lex::Tok::VAR,
        "init" => lex::Tok::INIT,
        "if" => lex::Tok::IF,
        "else" => lex::Tok::ELSE,
        "loop" => lex::Tok::LOOP,

        INTLIT => lex::Tok::INTLIT(<i64>),
        FLOATLIT => lex::Tok::FLOATLIT(<f64>),
        STRINGLIT => lex::Tok::STRINGLIT(<String>),
        CHARLIT => lex::Tok::CHARLIT(<char>),
    }
}

