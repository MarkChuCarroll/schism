// Copyright 2024 Mark C. Chu-Carroll
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use crate::lex;
use crate::ast;
use crate::errors;
use lalrpop_util::ParseError;

grammar;

pub Sect: ast::Sect = {
    <uses:UseDecl*>  <defs:Definition+> => {
         ast::Sect{uses, defs}
    }
}

#[inline]
Path: ast::ModulePath = {
    <segments:("." <LowerName>)+>
        => ast::ModulePath::new(segments)
}

UseDecl: ast::UseDecl = {
    "use" <path:Path> "." "{"
        <type_names:Separated<UpperName, ",">>
        <function_names:Separated<LowerName, ",">>
    "}"
        => ast::UseDecl {
            sect: path,
            type_names,
            function_names
        }
}

TypeIdent: ast::TypeIdent = {
    <p:Path> ":" <name:UpperName>
        => ast::Ident::Scoped{path: p, name},
    <name:UpperName>
        => ast::Ident::Local(name)
}

LIdent: ast::LowerIdent = {
    <p:Path> ":" <name:LowerName>
        => ast::Ident::Scoped{path: p, name},
    <name:LowerName>
        => ast::Ident::Local(name)
}

pub Definition: ast::Definition = {
    <SigDef>
        => ast::Definition::Sig(<>),
    <ObjectDef>
        => ast::Definition::Obj(<>),
    <FunctionDef>
         => ast::Definition::Function(<>),
    <VarDef>
        => ast::Definition::Var(<>)
}

TypeParamSpecList: Vec<ast::TypeParam> = {
    "[" <NonEmptySeparated<TypeParam, ",">> "]",
    // empty
        => Vec::new()
}

TypeParam: ast::TypeParam = {
    <name:TypeVarName> <constraint:(":" <SchismType>)?>
        => ast::TypeParam{name, constraint}
}

SchismType: ast::SchismType = {
    <name:TypeIdent>
    <type_args_opt:Bracketed<"[", Separated<Boxed<SchismType>, ",">, "]">?>
        => match type_args_opt {
            Some(type_args) => ast::SchismType::ParametricType(name, type_args),
            None => ast::SchismType::SimpleType(name)
        },
    <tv:TypeVarName>
        => ast::SchismType::UnboundTypeVar(tv),
    <ft:StackEffect>
        => ast::SchismType::FunctionType(ft)
}

ComposesClause: Vec<ast::SchismType> = {
    "composes" <NonEmptySeparated<SchismType, ",">>,
        => Vec::new()
}

SigDef: ast::SigDef = {
   "sig" <u:UpperName>
    <tps:TypeParamSpecList>
    <composes:ComposesClause>
    "is"
     <ops:OperationSig+>
    "end" ("@sig")?
       => ast::SigDef{
          name: u,
          type_params: tps,
          composes,
          operations: ops
       }
}

OperationSig: ast::OperationSig = {
    "meth" <name:LowerName> <effect:StackEffect>
        => ast::OperationSig::MethodSig{name, effect},
    "action" <name:LowerName> <inputs:StackImage>
        => ast::OperationSig::ActionSig{name, inputs}
}

StackImage: ast::StackImage = {
    <context:ContextName?>
    <stack:StackEntry*>
        => ast::StackImage{context, stack}
}

StackEntry: ast::StackEntry = {
    <name:(<LowerName> ":")?>  <st:SchismType>
        => match name {
            Some(n) => ast::StackEntry::NamedEntry(n, Box::new(st)),
            None =>  ast::StackEntry::TypeEntry(Box::new(st))
        }
}

StackEffect: ast::StackEffect = {
    "("
    <dom:EffectDomainList>
    <before:StackImage> "--"
    <after:StackImage>
    ")"
        =>  ast::StackEffect{ effect_domains: dom,
            before,
            after
        }
}

EffectDomainList: Vec<ast::TypeIdent> = {
    <Bracketed<"[", NonEmptySeparated<TypeIdent, ",">, "]">>,
        => Vec::new()
}

ObjectDef: ast::ObjectDef = {
    "obj" <name:UpperName> <tps:TypeParamSpecList> <c:ComposesClause>
    "(" <inputs:StackImage> ")"
    "is"
    <members:ObjectMemberDecl+> "do"
    <body:Statement*>
    "end" ("@obj")?
        => ast::ObjectDef{
            name, type_params: tps, composes: c,
            inputs, members, body
        }
}

ObjectMemberDecl: ast::ObjectMemberDecl = {
    <SlotDecl>,
    <MethodDecl>,
    <ActionDecl>
}

SlotDecl: ast::ObjectMemberDecl = {
    "slot" <name:LowerName>
    ":" <value_type:SchismType>
    "(" <inputs:StackImage> ")"
    "init" <body:Statement*> "end" ("@slot")?
        => ast::ObjectMemberDecl::ObjectSlot{
            name, value_type, inputs, body
        }
}

MethodDecl: ast::ObjectMemberDecl = {
    "meth"
    <name:LowerName> <effect:StackEffect> "do"
    <body:Statement*>
    "end" ("@meth")?
        => ast::ObjectMemberDecl::ObjectMethod{
            name, effect, body
        }
}

ActionDecl: ast::ObjectMemberDecl = {
    "action" <name:LowerName>
    "(" <inputs:StackImage> ")"
    "do" <body:Statement*> "end" ("@action")?
        => ast::ObjectMemberDecl::ObjectAction{
            name, inputs, body
        }
}

FunctionDef: ast::FunctionDef = {
    "function" <name:LowerName>
    <tps:TypeParamSpecList>
    <effect:StackEffect> "do"
    <body:Statement*>
    "end" ("@function")?
        => ast::FunctionDef {
            name,
            type_params: tps,
            effect, body
        }
}

VarDef: ast::VarDef = {
    "var" <name:LowerName> ":"
     <value_type:SchismType>
    "(" <inputs:StackImage> ")"
    "init" <body:Statement+> "end" ("@var")?
        => ast::VarDef {
            name, value_type, inputs, body
        }
}

Statement: ast::Statement = {
    <Immediate>,
    <LocalStmt>,
    <NewStmt>,
    <DispatchStmt>,
    <CallStmt>,
    <CondStmt>,
    <LoopStmt>,
    <ForStmt>,
    <ExitStmt>,
    <NextStmt>
}

LoopStmt: ast::Statement = {
    "loop" <label:LowerName?> "do"
    <body:Boxed<Statement>+>
    "end" ("@loop")?
        => ast::Statement::LoopStmt{ label, body }
}

ForStmt: ast::Statement = {
    "for" <idx:LowerName>
    "do" <body:Boxed<Statement>+>
    "end" ("@for")?
        => ast::Statement::ForStmt{idx, body}
}

ExitStmt: ast::Statement = {
    "exit" <label:Bracketed<"(",LowerName,")">?>
        => ast::Statement::ExitStmt(label)
}

NextStmt: ast::Statement = {
    "next" <label:Bracketed<"(",LowerName,")">?>
        => ast::Statement::NextStmt(label)
}

CondStmt: ast::Statement = {
    "cond"
    <clauses:CondClause+>
    <else_clause:ElseClause>
    "end" ("@cond")?
        => ast::Statement::CondStmt{clauses, else_clause}
}

ElseClause: Vec<Box<ast::Statement>> = {
    "else" <Boxed<Statement>+>,
        => Vec::new()
}

CondClause: ast::CondClause = {
    <cond:Boxed<BlockExpr>> "do"
    <body:Boxed<Statement>+> "end"
        => ast::CondClause{
            condition: cond,
            body
        }
}

LocalStmt: ast::Statement = {
    "local" <name:LowerName>
        => ast::Statement::Local(name)
}

NewStmt: ast::Statement = {
    "new" <object_type:SchismType>
        => ast::Statement::New(object_type)
}

DispatchStmt: ast::Statement = {
    "->" <name:LIdent>
        => ast::Statement::DispatchStmt(name)
}

CallStmt: ast::Statement = {
    "!" <name:LIdent>
        => ast::Statement::CallStmt(name)
}

Immediate: ast::Statement = {
    <sl:StringLit>
        => ast::Statement::StringLit(sl),
    <IntLit>
        => ast::Statement::IntLit(<>),
    <CharLit>
        => ast::Statement::CharLit(<>),
    <FloatLit>
        => ast::Statement::FloatLit(<>),
    <SequenceExpr>,
    <LIdent>
        => ast::Statement::Name(<>),
    <BlockExpr>
}

SequenceExpr: ast::Statement = {
    "[|" <body:Boxed<BlockExpr>+> "|]"
        => ast::Statement::Sequence(body)
}

BlockExpr: ast::Statement = {
    "{" <effect:StackEffect>
     <body:Boxed<Statement>*>
    "}"
        => ast::Statement::Block(body, effect)
}

NonEmptySeparated<NonTerm, Sep>: Vec<NonTerm> = {
    <mut v:(<NonTerm> Sep )*>  <nt:NonTerm>
        => {
            v.push(nt);
            v
        }
}

Separated<NonTerm, Sep>: Vec<NonTerm> = {
    <mut v:(<NonTerm> Sep )*>  <nt:NonTerm>
        => {
            v.push(nt);
            v
        },
    // empty
        => Vec::new()
}

Bracketed<Pre, NonTerm, Post>: NonTerm = {
    Pre <n:NonTerm> Post
        => n
}

Boxed<T>: Box<T> = {
    <t:T>
        => Box::new(t)
}


extern {
    type Location = lex::Location;
    type Error = errors::CompilationError;
    enum lex::Token {
        "." => lex::Token::Dot,
        ":" => lex::Token::Colon,
        "," => lex::Token::Comma,
        "--" => lex::Token::DashDash,
        "->" => lex::Token::Arrow,
        "!" => lex::Token::Bang,

        "[" => lex::Token::LBracket,
        "]" => lex::Token::RBracket,
        "[|" => lex::Token::LBracketBar,
        "|]" => lex::Token::RBracketBar,
        "(" => lex::Token::LParen,
        ")" => lex::Token::RParen,
        "{" => lex::Token::LCurly,
        "}" => lex::Token::RCurly,

        "action" => lex::Token::Action,
        "@action" => lex::Token::AtAction,
        "composes" => lex::Token::Composes,
        "cond" => lex::Token::Cond,
        "@cond" => lex::Token::AtCond,
        "do" => lex::Token::Do,
        "end" => lex::Token::End,
        "else" => lex::Token::Else,
        "exit" => lex::Token::Exit,
        "for" => lex::Token::For,
        "@for" => lex::Token::AtFor,
        "function" => lex::Token::Func,
        "@function" => lex::Token::AtFunc,
        "init" => lex::Token::Init,
        "is" => lex::Token::Is,
        "local" => lex::Token::Local,
        "loop" => lex::Token::Loop,
        "@loop" => lex::Token::AtLoop,
        "meth" => lex::Token::Method,
        "@meth" => lex::Token::AtMethod,
        "next" => lex::Token::Next,
        "new" => lex::Token::New,
        "obj" => lex::Token::Obj,
        "@obj" => lex::Token::AtObj,
        "sig" => lex::Token::Sig,
        "@sig" => lex::Token::AtSig,
        "slot" => lex::Token::Slot,
        "@slot" => lex::Token::AtSlot,
        "use" => lex::Token::Use,
        "var" => lex::Token::Var,
        "@var" => lex::Token::AtVar,

        LowerName => lex::Token::LName(<String>),
        UpperName => lex::Token::UName(<String>),
        ContextName => lex::Token::CName(<String>),
        TypeVarName => lex::Token::TVName(<String>),

        IntLit => lex::Token::IntLit(<i64>),
        FloatLit => lex::Token::FloatLit(<String>),
        StringLit => lex::Token::StringLit(<String>),
        CharLit => lex::Token::CharLit(<char>),
    }
}

